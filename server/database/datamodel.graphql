type Tag {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
}

type TestProject {
  id: ID! @id
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String! @unique
  securityCheck: Boolean
  description: String
  tags: [String!]
  chatbot: Chatbot!
  testSets: [TestSet!]!
  deviceSets: [DeviceSet!]!
  registeredComponents: [RegisteredComponent!]!
  capabilities: [Capability!]!
  agent: Agent
  batchCount: Int
  bail: Boolean
}

type Agent {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  description: String
  tags: [String!]
  heartbeat: DateTime
  debug: Boolean
  capabilities: [Capability!]!
}

type Chatbot {
  id: ID! @id
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]
  allowHtmlDisplay: Boolean
  capabilities: [Capability!]! @relation(name: "ChatbotCapabilities")
  sources: [Capability!]! @relation(name: "ChatbotSources")
  envs: [Capability!]! @relation(name: "ChatbotEnvs")
}

enum CapabilityType {
  STRING
  TEXT
  INT
  BOOLEAN
  JSON
  JS
}

type Capability {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: CapabilityType!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

type TestSession {
  id: ID! @id
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]
  chatbot: Chatbot!
  testSets: [TestSet!]!
  deviceSets: [DeviceSet!]!
  registeredComponents: [RegisteredComponent!]!
  testProject: TestProject
  agent: Agent
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus!
  results: [TestSessionTestCaseResult!]!
  securityCheck: Boolean
  securityAlerts: [SecurityAlert!]
  jobs: [TestSessionJob!]!
  capabilities: [Capability!]! @relation(name: "TestSessionCapabilities")
  sources: [Capability!]! @relation(name: "TestSessionSources")
  envs: [Capability!]! @relation(name: "TestSessionEnvs")
  chartData: String
}

type SecurityAlert {
  id: ID! @id
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: [String!]
}

enum Verb {
  POST,
  PUT,
  DELETE,
  GET
}

enum TestSessionStatus {
  PENDING
  RUNNING
  READY
  FAILED
}

type TestSessionTestCaseResult {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  testSession: TestSession!
  testcaseName: String!
  testcaseSource: String!
  success: Boolean!
  err: String
  duration: Int
  steps: [TestSessionTestCaseResultTranscript!]!
  attachments: [TestSessionTestCaseResultAttachment!]!
  testSet: TestSet
  testSetScript: TestSetScript
  testSetRepository: TestSetRepository
  testSetFolder: TestSetFolder
  testSetExcel: TestSetExcel
  testSetFilename: String
  deviceSet: DeviceSet
  deviceName: String
}

type TestSessionTestCaseResultTranscript {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  step: Int!
  sender: String!
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
}

type TestSessionTestCaseResultAttachment {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String,
  mimeType: String!,
  base64: String!
  testSessionTestCaseResult: TestSessionTestCaseResult!
}

type TestSessionJob {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  testSession: TestSession!
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  logs: [TestSessionJobLog!]!
}

enum TestSessionJobStatus {
  PENDING
  RUNNING
  READY
  FAILED
}

type TestSessionJobLog {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  testSessionJob: TestSessionJob!
  log: String!
}

type PerformanceTestSession {
    id: ID! @id
    client: Client
    createdAt: DateTime!
    updatedAt: DateTime!
    name: String!
    description: String
    tags: [String!]
    chatbot: Chatbot!
    testSets: [TestSet!]!
    registeredComponents: [RegisteredComponent!]!
    testProject: TestProject
    results: [PerformanceTestSessionAggregatedResult!]! @relation(name: "PerformanceTestSessionResults" onDelete: CASCADE)
    jobs: [PerformanceTestSessionJob!]! @relation(name: "PerformanceTestSessionJobs" onDelete: CASCADE)
    capabilities: [Capability!]! @relation(name: "PerformanceTestSessionCapabilities")
    sources: [Capability!]! @relation(name: "PerformanceTestSessionSources")
    envs: [Capability!]! @relation(name: "PerformanceTestSessionEnvs")
    parallelConvoCount: Int!
    parallelJobCount: Int!
    dataDensity: Int
    tickRepeatInitial: Int
    tickRepeatPerTick: Int
    tickMaxTime: Int!
    tickTime: Int!
}

type PerformanceTestSessionAggregatedResult {
    id: ID! @id
    createdAt: DateTime!
    updatedAt: DateTime!
    testSession: PerformanceTestSession! @relation(name: "PerformanceTestSessionResults")
    job: PerformanceTestSessionJob!
    stepIndex: Int!
    convo: String!
    execCount: Int!
    execDurationMin: Int
    execDurationMax: Int
    execDurationSum: Int
    waitCount: Int!
    waitDurationMin: Int
    waitDurationMax: Int
    waitDurationSum: Int
    stepStartAt: DateTime!
}

type PerformanceTestSessionJob {
    id: ID! @id
    createdAt: DateTime!
    updatedAt: DateTime!
    testSession: PerformanceTestSession! @relation(name: "PerformanceTestSessionJobs")
    jobId: Int
    status: TestSessionJobStatus!
    err: String
    started: DateTime
    finished: DateTime
    agentName: String
}

type TestSet {
  id: ID! @id
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean @default(value: true)
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean @default(value: false)
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean @default(value: true)
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean @default(value: false)
  normalizeText: Boolean @default(value: true)
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  tags: [String!]
  scripts: [TestSetScript!]!
  repositories: [TestSetRepository!]!
  folders: [TestSetFolder!]!
  excels: [TestSetExcel!]!
  statsUpdatedAt: DateTime,
  statsConvoCount: Int,
  statsPartialConvoCount: Int,
  statsUtterancesCount: Int,
  statsScriptingMemoryCount: Int,
  statsCompiledConvos: [TestSetCompiledConvo!]
  dependencies: [TestSet!]
}

enum TestSetExpandConvosModeType {
  UTTEXPANSION_MODE_ALL
  UTTEXPANSION_MODE_FIRST
  UTTEXPANSION_MODE_RANDOM
}

enum TestSetMatchingModeType {
  MATCHING_MODE_REGEXP
  MATCHING_MODE_INCLUDE
  MATCHING_MODE_INCLUDELOWERCASE
}

enum TestSetMemoryMatchingModeType {
  MATCHING_MODE_NON_WHITESPACE
  MATCHING_MODE_WORD
}

enum TestSetSelectionType {
  SELECTION_TYPE_LOCAL_ONLY
  SELECTION_TYPE_REMOTE_ONLY
  SELECTION_TYPE_LOCAL_AND_REMOTE
}

type TestSetCompiledConvo {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  order: Int
  description: String,
  sourceTag: String,
  stepCount: Int!
}

type TestSetScript {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  script: String!
  scriptType: TestSetScriptType!
  testSet: TestSet!
}

enum TestSetScriptType {
  SCRIPTING_TYPE_CONVO
  SCRIPTING_TYPE_PCONVO
  SCRIPTING_TYPE_UTTERANCES
  SCRIPTING_TYPE_SCRIPTING_MEMORY
}

type TestSetRepository {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  giturl: String!
  gitbranch: String!
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
  testSet: TestSet!
}

type TestSetFolder {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  path: String!
  globFilter: String
  testSet: TestSet!
}

type TestSetExcel {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  filename: String!
  filecontent: String!
  testSet: TestSet!
}

type DeviceSet {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]
  provider: DeviceProvider!
  devices: [DeviceDescriptor!]!
}

type DeviceDescriptor {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: DeviceType!
  capabilities: String!
}

type DeviceProvider {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  type: DeviceProviderType!
  url: String
  username: String
  password: String
}

enum DeviceProviderType {
  SAUCELABS
  TESTOBJECTS
  EXPERITEST
  LOCALSELENIUM
  INTEGRATED
}
enum DeviceType {
  DESKTOP
  MOBILEBROWSER
  MOBILEAPP
}

type UserRole {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  description: String
  permissions: [String!]
}

type User {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String! @unique
  password: String
  name: String! @unique
  roles: [UserRole!]
  clients: [Client!]
}

type ApiKey {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  key: String! @unique
  validFrom: DateTime
  validTo: DateTime
  clients: [Client!]
  permissions: [String!]
}

type RegisteredComponent {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  description: String
  type: RegisteredComponentType!
  default: Boolean!
  src: String!
  ref: String!
  global: Boolean!
  args: String
}

enum RegisteredComponentType {
  ASSERTER
  LOGICHOOK
  USERINPUT
}

type SystemSettings {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  cleanupJobIntervalMinutes: Int
  keepTestCaseSuccessScreenshotsDays: Int
  keepTestCaseSuccessConversationDays: Int
  keepTestCaseFailedScreenshotsDays: Int
  keepTestCaseFailedConversationDays: Int
}

type Client {
  id: ID! @id
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
}
