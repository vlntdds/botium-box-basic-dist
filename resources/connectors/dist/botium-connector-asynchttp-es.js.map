{"version":3,"file":"botium-connector-asynchttp-es.js","sources":["../src/connector.js","../index.js"],"sourcesContent":["const util = require('util')\nconst Redis = require('ioredis')\nconst _ = require('lodash')\nconst request = require('request-promise-native')\nconst debug = require('debug')('botium-connector-asynchttp')\n\nconst Capabilities = {\n  ASYNCRECEIVER_REDISURL: 'ASYNCRECEIVER_REDISURL',\n  ASYNCRECEIVER_POSTURL: 'ASYNCRECEIVER_POSTURL',\n  ASYNCRECEIVER_UNIQUEID: 'ASYNCRECEIVER_UNIQUEID'\n}\n\nclass BotiumConnectorAsyncReceiver {\n  constructor ({ queueBotSays, caps }) {\n    this.queueBotSays = queueBotSays\n    this.caps = caps\n    this.redis = null\n    this.queueReceivedMessages = false\n  }\n\n  async Build () {\n    debug('Build called')\n    await this._buildRedis()\n  }\n\n  async Start () {\n    debug('Start called')\n    this.queueReceivedMessages = true\n  }\n\n  async UserSays (msg) {\n    debug(`UserSays called ${util.inspect(msg)}`)\n    await request({\n      method: 'POST',\n      uri: this.caps[Capabilities.ASYNCRECEIVER_POSTURL],\n      body: {\n          data: [\n              {\n                  AppClient: \"Botium\",\n                  conversation: this.caps[Capabilities.ASYNCRECEIVER_UNIQUEID],\n                  event: \"INBOX\",\n                  from: this.caps[Capabilities.ASYNCRECEIVER_UNIQUEID],\n                  chat: {\n                      id: this.caps[Capabilities.ASYNCRECEIVER_UNIQUEID],\n                      first_name: \"Botium Client\",\n                      type: \"private\"\n                  },\n                  name: \"Botium Client\",\n                  text: msg,\n                  first_name: \"Botium Client\"\n              }\n          ],\n          \"AppClient\": \"Botium\"\n      },\n      json: true\n    });\n    return Promise.resolve(this)\n  }\n\n  async Stop () {\n    debug('Stop called')\n    this.queueReceivedMessages = false\n  }\n\n  async Clean () {\n    debug('Clean called')\n    await this._cleanRedis()\n  }\n\n  _buildRedis () {\n    return new Promise((resolve, reject) => {\n      this.redis = new Redis(this.caps[Capabilities.ASYNCRECEIVER_REDISURL])\n      this.redis.on('connect', () => {\n        debug(`Redis connected to ${util.inspect(this.caps[Capabilities.ASYNCRECEIVER_REDISURL])}`)\n        this.redis.subscribe(this.caps[Capabilities.ASYNCRECEIVER_UNIQUEID], (err, count) => {\n          if (err) {\n            return reject(new Error(`Redis failed to subscribe channel ${this.caps[Capabilities.ASYNCRECEIVER_UNIQUEID]}: ${util.inspect(err)}`))\n          }\n          debug(`Redis subscribed to ${count} channels. Listening for updates on the ${this.caps[Capabilities.ASYNCRECEIVER_UNIQUEID]} channel.`)\n          resolve()\n        })\n      })\n      this.redis.on('message', (channel, event) => {\n        if (this.queueReceivedMessages) {\n          if (!_.isString(event)) {\n            return debug(`WARNING: received non-string message from ${channel}, ignoring: ${event}`)\n          }\n          try {\n            event = JSON.parse(event)\n          } catch (err) {\n            return debug(`WARNING: received non-json message from ${channel}, ignoring: ${event}`)\n          }\n          if (!event.message) {\n            return debug(`Received a message without content from ${channel}: ${util.inspect(event)}`)\n          }\n\n          const botMsg = { sender: 'bot', sourceData: event }\n          if (event.message.text) {\n            botMsg.messageText = event.message.text\n          }\n          if (event.message.attachments && event.message.attachments.length > 0) {\n            event.message.attachments.forEach(a => {\n              if (a.type === 'image' && a.payload && a.payload.url) {\n                botMsg.media = botMsg.media || []\n                botMsg.media.push({\n                  mediaUri: a.payload.url\n                })\n              }\n              if (a.type === 'template' && a.payload && a.payload.template_type === 'generic') {\n                a.payload.elements && a.payload.elements.forEach(e => {\n                  botMsg.cards = botMsg.cards || []\n                  const card = {\n                    text: e.title\n                  }\n                  if (e.image_url) {\n                    card.image = { mediaUri: e.image_url }\n                  }\n                  if (e.buttons) {\n                    card.buttons = e.buttons.map(b => ({\n                      text: b.title,\n                      payload: b.payload\n                    }))\n                  }\n                  botMsg.cards.push(card)\n                })\n              }\n            })\n          }\n\n          debug(`Received a message to queue at ${channel}: ${util.inspect(botMsg)}`)\n          this.queueBotSays(botMsg)\n        } else {\n          debug(`Received message from ${channel}, ignoring`)\n        }\n      })\n    })\n  }\n\n  _cleanRedis () {\n    if (this.redis) {\n      this.redis.disconnect()\n      this.redis = null\n    }\n  }\n}\n\nmodule.exports = BotiumConnectorAsyncReceiver\n","const PluginClass = require('./src/connector')\n\nmodule.exports = {\n  PluginVersion: 1,\n  PluginClass: PluginClass\n}\n"],"names":["debug","require$$0","Capabilities","ASYNCRECEIVER_REDISURL","ASYNCRECEIVER_POSTURL","ASYNCRECEIVER_UNIQUEID","BotiumConnectorAsyncReceiver","constructor","queueBotSays","caps","redis","queueReceivedMessages","Build","_buildRedis","Start","UserSays","msg","util","inspect","request","method","uri","body","data","AppClient","conversation","event","from","chat","id","first_name","type","name","text","json","Promise","resolve","Stop","Clean","_cleanRedis","reject","Redis","on","subscribe","err","count","Error","channel","_","isString","JSON","parse","message","botMsg","sender","sourceData","messageText","attachments","length","forEach","a","payload","url","media","push","mediaUri","template_type","elements","e","cards","card","title","image_url","image","buttons","map","b","disconnect","PluginVersion","PluginClass"],"mappings":"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"}